"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getListListenAddresses = getListListenAddresses;
exports.resolveConfigPath = void 0;

var _path = _interopRequireDefault(require("path"));

var _utils = require("../utils");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @prettier
 * @flow
 */
const logger = require('../logger');

const resolveConfigPath = function (storageLocation, file) {
  return _path.default.resolve(_path.default.dirname(storageLocation), file);
};
/**
 * Retrieve all addresses defined in the config file.
 * Verdaccio is able to listen multiple ports
 * @param {String} argListen
 * @param {String} configListen
 * eg:
 *  listen:
 - localhost:5555
 - localhost:5557
 @return {Array}
 */


exports.resolveConfigPath = resolveConfigPath;

function getListListenAddresses(argListen, configListen) {
  // command line || config file || default
  let addresses;

  if (argListen) {
    addresses = [argListen];
  } else if (Array.isArray(configListen)) {
    addresses = configListen;
  } else if (configListen) {
    addresses = [configListen];
  } else {
    addresses = [_constants.DEFAULT_PORT];
  }

  addresses = addresses.map(function (addr) {
    const parsedAddr = (0, _utils.parseAddress)(addr);

    if (!parsedAddr) {
      logger.logger.warn({
        addr: addr
      }, 'invalid address - @{addr}, we expect a port (e.g. "4873"),' + ' host:port (e.g. "localhost:4873") or full url' + ' (e.g. "http://localhost:4873/")');
    }

    return parsedAddr;
  }).filter(Boolean);
  return addresses;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY2xpL3V0aWxzLnRzIl0sIm5hbWVzIjpbImxvZ2dlciIsInJlcXVpcmUiLCJyZXNvbHZlQ29uZmlnUGF0aCIsInN0b3JhZ2VMb2NhdGlvbiIsImZpbGUiLCJwYXRoIiwicmVzb2x2ZSIsImRpcm5hbWUiLCJnZXRMaXN0TGlzdGVuQWRkcmVzc2VzIiwiYXJnTGlzdGVuIiwiY29uZmlnTGlzdGVuIiwiYWRkcmVzc2VzIiwiQXJyYXkiLCJpc0FycmF5IiwiREVGQVVMVF9QT1JUIiwibWFwIiwiYWRkciIsInBhcnNlZEFkZHIiLCJ3YXJuIiwiZmlsdGVyIiwiQm9vbGVhbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFLQTs7QUFFQTs7QUFDQTs7OztBQVJBO0FBQ0E7QUFDQTtBQUNBO0FBT0EsTUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF0Qjs7QUFFTyxNQUFNQyxpQkFBaUIsR0FBRyxVQUFVQyxlQUFWLEVBQW1DQyxJQUFuQyxFQUFpRDtBQUNoRixTQUFPQyxjQUFLQyxPQUFMLENBQWFELGNBQUtFLE9BQUwsQ0FBYUosZUFBYixDQUFiLEVBQTRDQyxJQUE1QyxDQUFQO0FBQ0QsQ0FGTTtBQUlQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBQ08sU0FBU0ksc0JBQVQsQ0FBZ0NDLFNBQWhDLEVBQW1EQyxZQUFuRCxFQUEyRTtBQUNoRjtBQUNBLE1BQUlDLFNBQUo7O0FBQ0EsTUFBSUYsU0FBSixFQUFlO0FBQ2JFLElBQUFBLFNBQVMsR0FBRyxDQUFDRixTQUFELENBQVo7QUFDRCxHQUZELE1BRU8sSUFBSUcsS0FBSyxDQUFDQyxPQUFOLENBQWNILFlBQWQsQ0FBSixFQUFpQztBQUN0Q0MsSUFBQUEsU0FBUyxHQUFHRCxZQUFaO0FBQ0QsR0FGTSxNQUVBLElBQUlBLFlBQUosRUFBa0I7QUFDdkJDLElBQUFBLFNBQVMsR0FBRyxDQUFDRCxZQUFELENBQVo7QUFDRCxHQUZNLE1BRUE7QUFDTEMsSUFBQUEsU0FBUyxHQUFHLENBQUNHLHVCQUFELENBQVo7QUFDRDs7QUFDREgsRUFBQUEsU0FBUyxHQUFHQSxTQUFTLENBQ2xCSSxHQURTLENBQ0wsVUFBVUMsSUFBVixFQUF3QjtBQUMzQixVQUFNQyxVQUFVLEdBQUcseUJBQWFELElBQWIsQ0FBbkI7O0FBRUEsUUFBSSxDQUFDQyxVQUFMLEVBQWlCO0FBQ2ZqQixNQUFBQSxNQUFNLENBQUNBLE1BQVAsQ0FBY2tCLElBQWQsQ0FDRTtBQUFFRixRQUFBQSxJQUFJLEVBQUVBO0FBQVIsT0FERixFQUVFLCtEQUNFLGdEQURGLEdBRUUsa0NBSko7QUFNRDs7QUFFRCxXQUFPQyxVQUFQO0FBQ0QsR0FkUyxFQWVURSxNQWZTLENBZUZDLE9BZkUsQ0FBWjtBQWlCQSxTQUFPVCxTQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcmV0dGllclxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHsgcGFyc2VBZGRyZXNzIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgREVGQVVMVF9QT1JUIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnLi4vbG9nZ2VyJyk7XG5cbmV4cG9ydCBjb25zdCByZXNvbHZlQ29uZmlnUGF0aCA9IGZ1bmN0aW9uIChzdG9yYWdlTG9jYXRpb246IHN0cmluZywgZmlsZTogc3RyaW5nKSB7XG4gIHJldHVybiBwYXRoLnJlc29sdmUocGF0aC5kaXJuYW1lKHN0b3JhZ2VMb2NhdGlvbiksIGZpbGUpO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZSBhbGwgYWRkcmVzc2VzIGRlZmluZWQgaW4gdGhlIGNvbmZpZyBmaWxlLlxuICogVmVyZGFjY2lvIGlzIGFibGUgdG8gbGlzdGVuIG11bHRpcGxlIHBvcnRzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXJnTGlzdGVuXG4gKiBAcGFyYW0ge1N0cmluZ30gY29uZmlnTGlzdGVuXG4gKiBlZzpcbiAqICBsaXN0ZW46XG4gLSBsb2NhbGhvc3Q6NTU1NVxuIC0gbG9jYWxob3N0OjU1NTdcbiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExpc3RMaXN0ZW5BZGRyZXNzZXMoYXJnTGlzdGVuOiBzdHJpbmcsIGNvbmZpZ0xpc3RlbjogYW55KTogYW55IHtcbiAgLy8gY29tbWFuZCBsaW5lIHx8IGNvbmZpZyBmaWxlIHx8IGRlZmF1bHRcbiAgbGV0IGFkZHJlc3NlcztcbiAgaWYgKGFyZ0xpc3Rlbikge1xuICAgIGFkZHJlc3NlcyA9IFthcmdMaXN0ZW5dO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnTGlzdGVuKSkge1xuICAgIGFkZHJlc3NlcyA9IGNvbmZpZ0xpc3RlbjtcbiAgfSBlbHNlIGlmIChjb25maWdMaXN0ZW4pIHtcbiAgICBhZGRyZXNzZXMgPSBbY29uZmlnTGlzdGVuXTtcbiAgfSBlbHNlIHtcbiAgICBhZGRyZXNzZXMgPSBbREVGQVVMVF9QT1JUXTtcbiAgfVxuICBhZGRyZXNzZXMgPSBhZGRyZXNzZXNcbiAgICAubWFwKGZ1bmN0aW9uIChhZGRyKTogc3RyaW5nIHtcbiAgICAgIGNvbnN0IHBhcnNlZEFkZHIgPSBwYXJzZUFkZHJlc3MoYWRkcik7XG5cbiAgICAgIGlmICghcGFyc2VkQWRkcikge1xuICAgICAgICBsb2dnZXIubG9nZ2VyLndhcm4oXG4gICAgICAgICAgeyBhZGRyOiBhZGRyIH0sXG4gICAgICAgICAgJ2ludmFsaWQgYWRkcmVzcyAtIEB7YWRkcn0sIHdlIGV4cGVjdCBhIHBvcnQgKGUuZy4gXCI0ODczXCIpLCcgK1xuICAgICAgICAgICAgJyBob3N0OnBvcnQgKGUuZy4gXCJsb2NhbGhvc3Q6NDg3M1wiKSBvciBmdWxsIHVybCcgK1xuICAgICAgICAgICAgJyAoZS5nLiBcImh0dHA6Ly9sb2NhbGhvc3Q6NDg3My9cIiknXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJzZWRBZGRyO1xuICAgIH0pXG4gICAgLmZpbHRlcihCb29sZWFuKTtcblxuICByZXR1cm4gYWRkcmVzc2VzO1xufVxuIl19