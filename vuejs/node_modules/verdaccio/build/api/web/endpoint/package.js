"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _utils = require("../../../lib/utils");

var _middleware = require("../../middleware");

var _constants = require("../../../lib/constants");

var _user = require("../../../utils/user");

var _logger = require("../../../lib/logger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const getOrder = (order = 'asc') => {
  return order === 'asc';
};

function addPackageWebApi(route, storage, auth, config) {
  const can = (0, _middleware.allow)(auth);

  const checkAllow = (name, remoteUser) => new Promise((resolve, reject) => {
    try {
      auth.allow_access({
        packageName: name
      }, remoteUser, (err, allowed) => {
        if (err) {
          resolve(false);
        }

        resolve(allowed);
      });
    } catch (err) {
      reject(err);
    }
  }); // Get list of all visible package


  route.get('/packages', function (req, res, next) {
    storage.getLocalDatabase(async function (err, packages) {
      if (err) {
        throw err;
      }

      async function processPackages(packages = []) {
        const permissions = [];
        const packgesCopy = packages.slice();

        for (const pkg of packgesCopy) {
          const pkgCopy = _objectSpread({}, pkg);

          pkgCopy.author = (0, _utils.formatAuthor)(pkg.author);

          try {
            if (await checkAllow(pkg.name, req.remote_user)) {
              if (config.web) {
                pkgCopy.author.avatar = (0, _user.generateGravatarUrl)(pkgCopy.author.email, config.web.gravatar);
              }

              if (!_lodash.default.isNil(pkgCopy.dist) && !_lodash.default.isNull(pkgCopy.dist.tarball)) {
                pkgCopy.dist.tarball = (0, _utils.getLocalRegistryTarballUri)(pkgCopy.dist.tarball, pkg.name, req, config.url_prefix);
              }

              permissions.push(pkgCopy);
            }
          } catch (err) {
            _logger.logger.logger.error({
              name: pkg.name,
              error: err
            }, 'permission process for @{name} has failed: @{error}');

            throw err;
          }
        }

        return permissions;
      }

      const {
        web
      } = config; // @ts-ignore

      const order = config.web ? getOrder(web.sort_packages) : true;
      next((0, _utils.sortByName)(await processPackages(packages), order));
    });
  }); // Get package readme

  route.get('/package/readme/(@:scope/)?:package/:version?', can('access'), function (req, res, next) {
    const packageName = req.params.scope ? (0, _utils.addScope)(req.params.scope, req.params.package) : req.params.package;
    storage.getPackage({
      name: packageName,
      uplinksLook: true,
      req,
      callback: function (err, info) {
        if (err) {
          return next(err);
        }

        res.set(_constants.HEADER_TYPE.CONTENT_TYPE, _constants.HEADERS.TEXT_PLAIN);
        next((0, _utils.parseReadme)(info.name, info.readme));
      }
    });
  });
  route.get('/sidebar/(@:scope/)?:package', can('access'), function (req, res, next) {
    const packageName = req.params.scope ? (0, _utils.addScope)(req.params.scope, req.params.package) : req.params.package;
    storage.getPackage({
      name: packageName,
      uplinksLook: true,
      keepUpLinkData: true,
      req,
      callback: function (err, info) {
        if (_lodash.default.isNil(err)) {
          const {
            v
          } = req.query;

          let sideBarInfo = _lodash.default.clone(info);

          sideBarInfo.versions = (0, _utils.convertDistRemoteToLocalTarballUrls)(info, req, config.url_prefix).versions;

          if ((0, _utils.isVersionValid)(info, v)) {
            // @ts-ignore
            sideBarInfo.latest = sideBarInfo.versions[v];
            sideBarInfo.latest.author = (0, _utils.formatAuthor)(sideBarInfo.latest.author);
          } else {
            var _sideBarInfo;

            sideBarInfo.latest = sideBarInfo.versions[info[_constants.DIST_TAGS].latest];

            if ((_sideBarInfo = sideBarInfo) !== null && _sideBarInfo !== void 0 && _sideBarInfo.latest) {
              sideBarInfo.latest.author = (0, _utils.formatAuthor)(sideBarInfo.latest.author);
            } else {
              res.status(_constants.HTTP_STATUS.NOT_FOUND);
              res.end();
              return;
            }
          }

          sideBarInfo = (0, _utils.deleteProperties)(['readme', '_attachments', '_rev', 'name'], sideBarInfo);

          if (config.web) {
            sideBarInfo = (0, _utils.addGravatarSupport)(sideBarInfo, config.web.gravatar);
          } else {
            sideBarInfo = (0, _utils.addGravatarSupport)(sideBarInfo);
          }

          next(sideBarInfo);
        } else {
          res.status(_constants.HTTP_STATUS.NOT_FOUND);
          res.end();
        }
      }
    });
  });
}

var _default = addPackageWebApi;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvd2ViL2VuZHBvaW50L3BhY2thZ2UudHMiXSwibmFtZXMiOlsiZ2V0T3JkZXIiLCJvcmRlciIsImFkZFBhY2thZ2VXZWJBcGkiLCJyb3V0ZSIsInN0b3JhZ2UiLCJhdXRoIiwiY29uZmlnIiwiY2FuIiwiY2hlY2tBbGxvdyIsIm5hbWUiLCJyZW1vdGVVc2VyIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJhbGxvd19hY2Nlc3MiLCJwYWNrYWdlTmFtZSIsImVyciIsImFsbG93ZWQiLCJnZXQiLCJyZXEiLCJyZXMiLCJuZXh0IiwiZ2V0TG9jYWxEYXRhYmFzZSIsInBhY2thZ2VzIiwicHJvY2Vzc1BhY2thZ2VzIiwicGVybWlzc2lvbnMiLCJwYWNrZ2VzQ29weSIsInNsaWNlIiwicGtnIiwicGtnQ29weSIsImF1dGhvciIsInJlbW90ZV91c2VyIiwid2ViIiwiYXZhdGFyIiwiZW1haWwiLCJncmF2YXRhciIsIl8iLCJpc05pbCIsImRpc3QiLCJpc051bGwiLCJ0YXJiYWxsIiwidXJsX3ByZWZpeCIsInB1c2giLCJsb2dnZXIiLCJlcnJvciIsInNvcnRfcGFja2FnZXMiLCJwYXJhbXMiLCJzY29wZSIsInBhY2thZ2UiLCJnZXRQYWNrYWdlIiwidXBsaW5rc0xvb2siLCJjYWxsYmFjayIsImluZm8iLCJzZXQiLCJIRUFERVJfVFlQRSIsIkNPTlRFTlRfVFlQRSIsIkhFQURFUlMiLCJURVhUX1BMQUlOIiwicmVhZG1lIiwia2VlcFVwTGlua0RhdGEiLCJ2IiwicXVlcnkiLCJzaWRlQmFySW5mbyIsImNsb25lIiwidmVyc2lvbnMiLCJsYXRlc3QiLCJESVNUX1RBR1MiLCJzdGF0dXMiLCJIVFRQX1NUQVRVUyIsIk5PVF9GT1VORCIsImVuZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUdBOztBQVdBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7O0FBVUEsTUFBTUEsUUFBUSxHQUFHLENBQUNDLEtBQUssR0FB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QUNBakQsVUFBQUEsR0FBRyxDQUFDa0QsR0FBSjtBQUNEO0FBQ0Y7QUF2Q2dCLEtBQW5CO0FBeUNELEdBakRIO0FBbUREOztlQUVjcEUsZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBDb25maWcsIFBhY2thZ2UgfSBmcm9tICdAdmVyZGFjY2lvL3R5cGVzJztcbmltcG9ydCB7XG4gIGFkZFNjb3BlLFxuICBhZGRHcmF2YXRhclN1cHBvcnQsXG4gIGRlbGV0ZVByb3BlcnRpZXMsXG4gIHNvcnRCeU5hbWUsXG4gIHBhcnNlUmVhZG1lLFxuICBmb3JtYXRBdXRob3IsXG4gIGNvbnZlcnREaXN0UmVtb3RlVG9Mb2NhbFRhcmJhbGxVcmxzLFxuICBnZXRMb2NhbFJlZ2lzdHJ5VGFyYmFsbFVyaSxcbiAgaXNWZXJzaW9uVmFsaWRcbn0gZnJvbSAnLi4vLi4vLi4vbGliL3V0aWxzJztcbmltcG9ydCB7IGFsbG93IH0gZnJvbSAnLi4vLi4vbWlkZGxld2FyZSc7XG5pbXBvcnQgeyBESVNUX1RBR1MsIEhFQURFUl9UWVBFLCBIRUFERVJTLCBIVFRQX1NUQVRVUyB9IGZyb20gJy4uLy4uLy4uL2xpYi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVHcmF2YXRhclVybCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3VzZXInO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vLi4vLi4vbGliL2xvZ2dlcic7XG5pbXBvcnQge1xuICBJQXV0aCxcbiAgJFJlc3BvbnNlRXh0ZW5kLFxuICAkUmVxdWVzdEV4dGVuZCxcbiAgJE5leHRGdW5jdGlvblZlcixcbiAgSVN0b3JhZ2VIYW5kbGVyLFxuICAkU2lkZWJhclBhY2thZ2Vcbn0gZnJvbSAnLi4vLi4vLi4vLi4vdHlwZXMnO1xuXG5jb25zdCBnZXRPcmRlciA9IChvcmRlciA9ICdhc2MnKSA9PiB7XG4gIHJldHVybiBvcmRlciA9PT0gJ2FzYyc7XG59O1xuXG5leHBvcnQgdHlwZSBQYWNrY2FnZUV4dCA9IFBhY2thZ2UgJiB7IGF1dGhvcjogYW55OyBkaXN0PzogeyB0YXJiYWxsOiBzdHJpbmcgfSB9O1xuXG5mdW5jdGlvbiBhZGRQYWNrYWdlV2ViQXBpKFxuICByb3V0ZTogUm91dGVyLFxuICBzdG9yYWdlOiBJU3RvcmFnZUhhbmRsZXIsXG4gIGF1dGg6IElBdXRoLFxuICBjb25maWc6IENvbmZpZ1xuKTogdm9pZCB7XG4gIGNvbnN0IGNhbiA9IGFsbG93KGF1dGgpO1xuXG4gIGNvbnN0IGNoZWNrQWxsb3cgPSAobmFtZSwgcmVtb3RlVXNlcik6IFByb21pc2U8Ym9vbGVhbj4gPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KTogdm9pZCA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBhdXRoLmFsbG93X2FjY2Vzcyh7IHBhY2thZ2VOYW1lOiBuYW1lIH0sIHJlbW90ZVVzZXIsIChlcnIsIGFsbG93ZWQpOiB2b2lkID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzb2x2ZShhbGxvd2VkKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgLy8gR2V0IGxpc3Qgb2YgYWxsIHZpc2libGUgcGFja2FnZVxuICByb3V0ZS5nZXQoXG4gICAgJy9wYWNrYWdlcycsXG4gICAgZnVuY3Rpb24gKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogJFJlc3BvbnNlRXh0ZW5kLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gICAgICBzdG9yYWdlLmdldExvY2FsRGF0YWJhc2UoYXN5bmMgZnVuY3Rpb24gKGVyciwgcGFja2FnZXMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NQYWNrYWdlcyhwYWNrYWdlczogUGFja2NhZ2VFeHRbXSA9IFtdKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgICBjb25zdCBwZXJtaXNzaW9uczogUGFja2NhZ2VFeHRbXSA9IFtdO1xuICAgICAgICAgIGNvbnN0IHBhY2tnZXNDb3B5ID0gcGFja2FnZXMuc2xpY2UoKTtcbiAgICAgICAgICBmb3IgKGNvbnN0IHBrZyBvZiBwYWNrZ2VzQ29weSkge1xuICAgICAgICAgICAgY29uc3QgcGtnQ29weSA9IHsgLi4ucGtnIH07XG4gICAgICAgICAgICBwa2dDb3B5LmF1dGhvciA9IGZvcm1hdEF1dGhvcihwa2cuYXV0aG9yKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGlmIChhd2FpdCBjaGVja0FsbG93KHBrZy5uYW1lLCByZXEucmVtb3RlX3VzZXIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy53ZWIpIHtcbiAgICAgICAgICAgICAgICAgIHBrZ0NvcHkuYXV0aG9yLmF2YXRhciA9IGdlbmVyYXRlR3JhdmF0YXJVcmwoXG4gICAgICAgICAgICAgICAgICAgIHBrZ0NvcHkuYXV0aG9yLmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICBjb25maWcud2ViLmdyYXZhdGFyXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIV8uaXNOaWwocGtnQ29weS5kaXN0KSAmJiAhXy5pc051bGwocGtnQ29weS5kaXN0LnRhcmJhbGwpKSB7XG4gICAgICAgICAgICAgICAgICBwa2dDb3B5LmRpc3QudGFyYmFsbCA9IGdldExvY2FsUmVnaXN0cnlUYXJiYWxsVXJpKFxuICAgICAgICAgICAgICAgICAgICBwa2dDb3B5LmRpc3QudGFyYmFsbCxcbiAgICAgICAgICAgICAgICAgICAgcGtnLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHJlcSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLnVybF9wcmVmaXhcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zLnB1c2gocGtnQ29weSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICBsb2dnZXIubG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgIHsgbmFtZTogcGtnLm5hbWUsIGVycm9yOiBlcnIgfSxcbiAgICAgICAgICAgICAgICAncGVybWlzc2lvbiBwcm9jZXNzIGZvciBAe25hbWV9IGhhcyBmYWlsZWQ6IEB7ZXJyb3J9J1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHBlcm1pc3Npb25zO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyB3ZWIgfSA9IGNvbmZpZztcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCBvcmRlcjogYm9vbGVhbiA9IGNvbmZpZy53ZWIgPyBnZXRPcmRlcih3ZWIuc29ydF9wYWNrYWdlcykgOiB0cnVlO1xuXG4gICAgICAgIG5leHQoc29ydEJ5TmFtZShhd2FpdCBwcm9jZXNzUGFja2FnZXMocGFja2FnZXMpLCBvcmRlcikpO1xuICAgICAgfSk7XG4gICAgfVxuICApO1xuXG4gIC8vIEdldCBwYWNrYWdlIHJlYWRtZVxuICByb3V0ZS5nZXQoXG4gICAgJy9wYWNrYWdlL3JlYWRtZS8oQDpzY29wZS8pPzpwYWNrYWdlLzp2ZXJzaW9uPycsXG4gICAgY2FuKCdhY2Nlc3MnKSxcbiAgICBmdW5jdGlvbiAocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiAkUmVzcG9uc2VFeHRlbmQsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHBhY2thZ2VOYW1lID0gcmVxLnBhcmFtcy5zY29wZVxuICAgICAgICA/IGFkZFNjb3BlKHJlcS5wYXJhbXMuc2NvcGUsIHJlcS5wYXJhbXMucGFja2FnZSlcbiAgICAgICAgOiByZXEucGFyYW1zLnBhY2thZ2U7XG5cbiAgICAgIHN0b3JhZ2UuZ2V0UGFja2FnZSh7XG4gICAgICAgIG5hbWU6IHBhY2thZ2VOYW1lLFxuICAgICAgICB1cGxpbmtzTG9vazogdHJ1ZSxcbiAgICAgICAgcmVxLFxuICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKGVyciwgaW5mbyk6IHZvaWQge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0KGVycik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVzLnNldChIRUFERVJfVFlQRS5DT05URU5UX1RZUEUsIEhFQURFUlMuVEVYVF9QTEFJTik7XG4gICAgICAgICAgbmV4dChwYXJzZVJlYWRtZShpbmZvLm5hbWUsIGluZm8ucmVhZG1lKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgKTtcblxuICByb3V0ZS5nZXQoXG4gICAgJy9zaWRlYmFyLyhAOnNjb3BlLyk/OnBhY2thZ2UnLFxuICAgIGNhbignYWNjZXNzJyksXG4gICAgZnVuY3Rpb24gKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogJFJlc3BvbnNlRXh0ZW5kLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gICAgICBjb25zdCBwYWNrYWdlTmFtZTogc3RyaW5nID0gcmVxLnBhcmFtcy5zY29wZVxuICAgICAgICA/IGFkZFNjb3BlKHJlcS5wYXJhbXMuc2NvcGUsIHJlcS5wYXJhbXMucGFja2FnZSlcbiAgICAgICAgOiByZXEucGFyYW1zLnBhY2thZ2U7XG5cbiAgICAgIHN0b3JhZ2UuZ2V0UGFja2FnZSh7XG4gICAgICAgIG5hbWU6IHBhY2thZ2VOYW1lLFxuICAgICAgICB1cGxpbmtzTG9vazogdHJ1ZSxcbiAgICAgICAga2VlcFVwTGlua0RhdGE6IHRydWUsXG4gICAgICAgIHJlcSxcbiAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIChlcnI6IEVycm9yLCBpbmZvOiAkU2lkZWJhclBhY2thZ2UpOiB2b2lkIHtcbiAgICAgICAgICBpZiAoXy5pc05pbChlcnIpKSB7XG4gICAgICAgICAgICBjb25zdCB7IHYgfSA9IHJlcS5xdWVyeTtcbiAgICAgICAgICAgIGxldCBzaWRlQmFySW5mbzogYW55ID0gXy5jbG9uZShpbmZvKTtcbiAgICAgICAgICAgIHNpZGVCYXJJbmZvLnZlcnNpb25zID0gY29udmVydERpc3RSZW1vdGVUb0xvY2FsVGFyYmFsbFVybHMoXG4gICAgICAgICAgICAgIGluZm8sXG4gICAgICAgICAgICAgIHJlcSxcbiAgICAgICAgICAgICAgY29uZmlnLnVybF9wcmVmaXhcbiAgICAgICAgICAgICkudmVyc2lvbnM7XG4gICAgICAgICAgICBpZiAoaXNWZXJzaW9uVmFsaWQoaW5mbywgdikpIHtcbiAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICBzaWRlQmFySW5mby5sYXRlc3QgPSBzaWRlQmFySW5mby52ZXJzaW9uc1t2XTtcbiAgICAgICAgICAgICAgc2lkZUJhckluZm8ubGF0ZXN0LmF1dGhvciA9IGZvcm1hdEF1dGhvcihzaWRlQmFySW5mby5sYXRlc3QuYXV0aG9yKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNpZGVCYXJJbmZvLmxhdGVzdCA9IHNpZGVCYXJJbmZvLnZlcnNpb25zW2luZm9bRElTVF9UQUdTXS5sYXRlc3RdO1xuICAgICAgICAgICAgICBpZiAoc2lkZUJhckluZm8/LmxhdGVzdCkge1xuICAgICAgICAgICAgICAgIHNpZGVCYXJJbmZvLmxhdGVzdC5hdXRob3IgPSBmb3JtYXRBdXRob3Ioc2lkZUJhckluZm8ubGF0ZXN0LmF1dGhvcik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cyhIVFRQX1NUQVRVUy5OT1RfRk9VTkQpO1xuICAgICAgICAgICAgICAgIHJlcy5lbmQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpZGVCYXJJbmZvID0gZGVsZXRlUHJvcGVydGllcyhbJ3JlYWRtZScsICdfYXR0YWNobWVudHMnLCAnX3JldicsICduYW1lJ10sIHNpZGVCYXJJbmZvKTtcbiAgICAgICAgICAgIGlmIChjb25maWcud2ViKSB7XG4gICAgICAgICAgICAgIHNpZGVCYXJJbmZvID0gYWRkR3JhdmF0YXJTdXBwb3J0KHNpZGVCYXJJbmZvLCBjb25maWcud2ViLmdyYXZhdGFyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNpZGVCYXJJbmZvID0gYWRkR3JhdmF0YXJTdXBwb3J0KHNpZGVCYXJJbmZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHQoc2lkZUJhckluZm8pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMuc3RhdHVzKEhUVFBfU1RBVFVTLk5PVF9GT1VORCk7XG4gICAgICAgICAgICByZXMuZW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFkZFBhY2thZ2VXZWJBcGk7XG4iXX0=