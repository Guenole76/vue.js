"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../../../lib/constants");

var _logger = require("../../../lib/logger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _default(storage) {
  const validateInputs = (newUsers, localUsers, username, isStar) => {
    const isExistlocalUsers = _lodash.default.isNil(localUsers[username]) === false;

    if (isStar && isExistlocalUsers && localUsers[username]) {
      return true;
    } else if (!isStar && isExistlocalUsers) {
      return false;
    } else if (!isStar && !isExistlocalUsers) {
      return true;
    }

    return false;
  };

  return (req, res, next) => {
    const name = req.params.package;

    _logger.logger.debug({
      name
    }, 'starring a package for @{name}');

    const afterChangePackage = function (err) {
      if (err) {
        return next(err);
      }

      res.status(_constants.HTTP_STATUS.OK);
      next({
        success: true
      });
    };

    storage.getPackage({
      name,
      req,
      callback: function (err, info) {
        if (err) {
          return next(err);
        }

        const newStarUser = req.body[_constants.USERS];
        const remoteUsername = req.remote_user.name;
        const localStarUsers = info[_constants.USERS]; // Check is star or unstar

        const isStar = Object.keys(newStarUser).includes(remoteUsername);

        if (_lodash.default.isNil(localStarUsers) === false && validateInputs(newStarUser, localStarUsers, remoteUsername, isStar)) {
          return afterChangePackage();
        }

        const users = isStar ? _objectSpread(_objectSpread({}, localStarUsers), {}, {
          [remoteUsername]: true
        }) : _lodash.default.reduce(localStarUsers, (users, value, key) => {
          if (key !== remoteUsername) {
            users[key] = value;
          }

          return users;
        }, {});
        storage.changePackage(name, _objectSpread(_objectSpread({}, info), {}, {
          users
        }), req.body._rev, function (err) {
          afterChangePackage(err);
        });
      }
    });
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvZW5kcG9pbnQvYXBpL3N0YXIudHMiXSwibmFtZXMiOlsic3RvcmFnZSIsInZhbGlkYXRlSW5wdXRzIiwibmV3VXNlcnMiLCJsb2NhbFVzZXJzIiwidXNlcm5hbWUiLCJpc1N0YXIiLCJpc0V4aXN0bG9jYWxVc2VycyIsIl8iLCJpc05pbCIsInJlcSIsInJlcyIsIm5leHQiLCJuYW1lIiwicGFyYW1zIiwicGFja2FnZSIsImxvZ2dlciIsImRlYnVnIiwiYWZ0ZXJDaGFuZ2VQYWNrYWdlIiwiZXJyIiwic3RhdHVzIiwiSFRUUF9TVEFUVVMiLCJPSyIsInN1Y2Nlc3MiLCJnZXRQYWNrYWdlIiwiY2FsbGJhY2siLCJpbmZvIiwibmV3U3RhclVzZXIiLCJib2R5IiwiVVNFUlMiLCJyZW1vdGVVc2VybmFtZSIsInJlbW90ZV91c2VyIiwibG9jYWxTdGFyVXNlcnMiLCJPYmplY3QiLCJrZXlzIiwiaW5jbHVkZXMiLCJ1c2VycyIsInJlZHVjZSIsInZhbHVlIiwia2V5IiwiY2hhbmdlUGFja2FnZSIsIl9yZXYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7OztBQUVlLGtCQUNiQSxPQURhLEVBRXlEO0FBQ3RFLFFBQU1DLGNBQWMsR0FBRyxDQUFDQyxRQUFELEVBQVdDLFVBQVgsRUFBdUJDLFFBQXZCLEVBQWlDQyxNQUFqQyxLQUFxRDtBQUMxRSxVQUFNQyxpQkFBaUIsR0FBR0MsZ0JBQUVDLEtBQUYsQ0FBUUwsVUFBVSxDQUFDQyxRQUFELENBQWxCLE1BQWtDLEtBQTVEOztBQUNBLFFBQUlDLE1BQU0sSUFBSUMsaUJBQVYsSUFBK0JILFVBQVUsQ0FBQ0MsUUFBRCxDQUE3QyxFQUF5RDtBQUN2RCxhQUFPLElBQVA7QUFDRCxLQUZELE1BRU8sSUFBSSxDQUFDQyxNQUFELElBQVdDLGlCQUFmLEVBQWtDO0FBQ3ZDLGFBQU8sS0FBUDtBQUNELEtBRk0sTUFFQSxJQUFJLENBQUNELE1BQUQsSUFBVyxDQUFDQyxpQkFBaEIsRUFBbUM7QUFDeEMsYUFBTyxJQUFQO0FBQ0Q7O0FBQ0QsV0FBTyxLQUFQO0FBQ0QsR0FWRDs7QUFZQSxTQUFPLENBQUNHLEdBQUQsRUFBc0JDLEdBQXRCLEVBQXFDQyxJQUFyQyxLQUFzRTtBQUMzRSxVQUFNQyxJQUFJLEdBQUdILEdBQUcsQ0FBQ0ksTUFBSixDQUFXQyxPQUF4Qjs7QUFDQUMsbUJBQU9DLEtBQVAsQ0FBYTtBQUFFSixNQUFBQTtBQUFGLEtBQWIsRUFBdUIsZ0NBQXZCOztBQUNBLFVBQU1LLGtCQUFrQixHQUFHLFVBQVVDLEdBQVYsRUFBdUI7QUFDaEQsVUFBSUEsR0FBSixFQUFTO0FBQ1AsZUFBT1AsSUFBSSxDQUFDTyxHQUFELENBQVg7QUFDRDs7QUFDRFIsTUFBQUEsR0FBRyxDQUFDUyxNQUFKLENBQVdDLHVCQUFZQyxFQUF2QjtBQUNBVixNQUFBQSxJQUFJLENBQUM7QUFDSFcsUUFBQUEsT0FBTyxFQUFFO0FBRE4sT0FBRCxDQUFKO0FBR0QsS0FSRDs7QUFVQXRCLElBQUFBLE9BQU8sQ0FBQ3VCLFVBQVIsQ0FBbUI7QUFDakJYLE1BQUFBLElBRGlCO0FBRWpCSCxNQUFBQSxHQUZpQjtBQUdqQmUsTUFBQUEsUUFBUSxFQUFFLFVBQVVOLEdBQVYsRUFBZU8sSUFBZixFQUFxQjtBQUM3QixZQUFJUCxHQUFKLEVBQVM7QUFDUCxpQkFBT1AsSUFBSSxDQUFDTyxHQUFELENBQVg7QUFDRDs7QUFDRCxjQUFNUSxXQUFXLEdBQUdqQixHQUFHLENBQUNrQixJQUFKLENBQVNDLGdCQUFULENBQXBCO0FBQ0EsY0FBTUMsY0FBYyxHQUFHcEIsR0FBRyxDQUFDcUIsV0FBSixDQUFnQmxCLElBQXZDO0FBQ0EsY0FBTW1CLGNBQWMsR0FBR04sSUFBSSxDQUFDRyxnQkFBRCxDQUEzQixDQU42QixDQU83Qjs7QUFDQSxjQUFNdkIsTUFBTSxHQUFHMkIsTUFBTSxDQUFDQyxJQUFQLENBQVlQLFdBQVosRUFBeUJRLFFBQXpCLENBQWtDTCxjQUFsQyxDQUFmOztBQUNBLFlBQ0V0QixnQkFBRUMsS0FBRixDQUFRdUIsY0FBUixNQUE0QixLQUE1QixJQUNBOUIsY0FBYyxDQUFDeUIsV0FBRCxFQUFjSyxjQUFkLEVBQThCRixjQUE5QixFQUE4Q3hCLE1BQTlDLENBRmhCLEVBR0U7QUFDQSxpQkFBT1ksa0JBQWtCLEVBQXpCO0FBQ0Q7O0FBQ0QsY0FBTWtCLEtBQUssR0FBRzlCLE1BQU0sbUNBRVgwQixjQUZXO0FBR2QsV0FBQ0YsY0FBRCxHQUFrQjtBQUhKLGFBS2hCdEIsZ0JBQUU2QixNQUFGLENBQ0VMLGNBREYsRUFFRSxDQUFDSSxLQUFELEVBQVFFLEtBQVIsRUFBZUMsR0FBZixLQUF1QjtBQUNyQixjQUFJQSxHQUFHLEtBQUtULGNBQVosRUFBNEI7QUFDMUJNLFlBQUFBLEtBQUssQ0FBQ0csR0FBRCxDQUFMLEdBQWFELEtBQWI7QUFDRDs7QUFDRCxpQkFBT0YsS0FBUDtBQUNELFNBUEgsRUFRRSxFQVJGLENBTEo7QUFlQW5DLFFBQUFBLE9BQU8sQ0FBQ3VDLGFBQVIsQ0FBc0IzQixJQUF0QixrQ0FBaUNhLElBQWpDO0FBQXVDVSxVQUFBQTtBQUF2QyxZQUFnRDFCLEdBQUcsQ0FBQ2tCLElBQUosQ0FBU2EsSUFBekQsRUFBK0QsVUFBVXRCLEdBQVYsRUFBZTtBQUM1RUQsVUFBQUEsa0JBQWtCLENBQUNDLEdBQUQsQ0FBbEI7QUFDRCxTQUZEO0FBR0Q7QUFwQ2dCLEtBQW5CO0FBc0NELEdBbkREO0FBb0REIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHsgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBVU0VSUywgSFRUUF9TVEFUVVMgfSBmcm9tICcuLi8uLi8uLi9saWIvY29uc3RhbnRzJztcbmltcG9ydCB7ICRSZXF1ZXN0RXh0ZW5kLCAkTmV4dEZ1bmN0aW9uVmVyLCBJU3RvcmFnZUhhbmRsZXIgfSBmcm9tICcuLi8uLi8uLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi8uLi8uLi9saWIvbG9nZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKFxuICBzdG9yYWdlOiBJU3RvcmFnZUhhbmRsZXJcbik6IChyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6IFJlc3BvbnNlLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKSA9PiB2b2lkIHtcbiAgY29uc3QgdmFsaWRhdGVJbnB1dHMgPSAobmV3VXNlcnMsIGxvY2FsVXNlcnMsIHVzZXJuYW1lLCBpc1N0YXIpOiBib29sZWFuID0+IHtcbiAgICBjb25zdCBpc0V4aXN0bG9jYWxVc2VycyA9IF8uaXNOaWwobG9jYWxVc2Vyc1t1c2VybmFtZV0pID09PSBmYWxzZTtcbiAgICBpZiAoaXNTdGFyICYmIGlzRXhpc3Rsb2NhbFVzZXJzICYmIGxvY2FsVXNlcnNbdXNlcm5hbWVdKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKCFpc1N0YXIgJiYgaXNFeGlzdGxvY2FsVXNlcnMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCFpc1N0YXIgJiYgIWlzRXhpc3Rsb2NhbFVzZXJzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHJldHVybiAocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiBSZXNwb25zZSwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQgPT4ge1xuICAgIGNvbnN0IG5hbWUgPSByZXEucGFyYW1zLnBhY2thZ2U7XG4gICAgbG9nZ2VyLmRlYnVnKHsgbmFtZSB9LCAnc3RhcnJpbmcgYSBwYWNrYWdlIGZvciBAe25hbWV9Jyk7XG4gICAgY29uc3QgYWZ0ZXJDaGFuZ2VQYWNrYWdlID0gZnVuY3Rpb24gKGVycj86IEVycm9yKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBuZXh0KGVycik7XG4gICAgICB9XG4gICAgICByZXMuc3RhdHVzKEhUVFBfU1RBVFVTLk9LKTtcbiAgICAgIG5leHQoe1xuICAgICAgICBzdWNjZXNzOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgc3RvcmFnZS5nZXRQYWNrYWdlKHtcbiAgICAgIG5hbWUsXG4gICAgICByZXEsXG4gICAgICBjYWxsYmFjazogZnVuY3Rpb24gKGVyciwgaW5mbykge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdTdGFyVXNlciA9IHJlcS5ib2R5W1VTRVJTXTtcbiAgICAgICAgY29uc3QgcmVtb3RlVXNlcm5hbWUgPSByZXEucmVtb3RlX3VzZXIubmFtZTtcbiAgICAgICAgY29uc3QgbG9jYWxTdGFyVXNlcnMgPSBpbmZvW1VTRVJTXTtcbiAgICAgICAgLy8gQ2hlY2sgaXMgc3RhciBvciB1bnN0YXJcbiAgICAgICAgY29uc3QgaXNTdGFyID0gT2JqZWN0LmtleXMobmV3U3RhclVzZXIpLmluY2x1ZGVzKHJlbW90ZVVzZXJuYW1lKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIF8uaXNOaWwobG9jYWxTdGFyVXNlcnMpID09PSBmYWxzZSAmJlxuICAgICAgICAgIHZhbGlkYXRlSW5wdXRzKG5ld1N0YXJVc2VyLCBsb2NhbFN0YXJVc2VycywgcmVtb3RlVXNlcm5hbWUsIGlzU3RhcilcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGFmdGVyQ2hhbmdlUGFja2FnZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVzZXJzID0gaXNTdGFyXG4gICAgICAgICAgPyB7XG4gICAgICAgICAgICAgIC4uLmxvY2FsU3RhclVzZXJzLFxuICAgICAgICAgICAgICBbcmVtb3RlVXNlcm5hbWVdOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiBfLnJlZHVjZShcbiAgICAgICAgICAgICAgbG9jYWxTdGFyVXNlcnMsXG4gICAgICAgICAgICAgICh1c2VycywgdmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgIT09IHJlbW90ZVVzZXJuYW1lKSB7XG4gICAgICAgICAgICAgICAgICB1c2Vyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1c2VycztcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge31cbiAgICAgICAgICAgICk7XG4gICAgICAgIHN0b3JhZ2UuY2hhbmdlUGFja2FnZShuYW1lLCB7IC4uLmluZm8sIHVzZXJzIH0sIHJlcS5ib2R5Ll9yZXYsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBhZnRlckNoYW5nZVBhY2thZ2UoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59XG4iXX0=