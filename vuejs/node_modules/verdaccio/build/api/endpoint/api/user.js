"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _lodash = _interopRequireDefault(require("lodash"));

var _cookies = _interopRequireDefault(require("cookies"));

var _utils = require("../../../lib/utils");

var _constants = require("../../../lib/constants");

var _authUtils = require("../../../lib/auth-utils");

var _logger = require("../../../lib/logger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(route, auth, config) {
  route.get('/-/user/:org_couchdb_user', function (req, res, next) {
    res.status(_constants.HTTP_STATUS.OK);
    next({
      ok: (0, _authUtils.getAuthenticatedMessage)(req.remote_user.name)
    });
  });
  route.put('/-/user/:org_couchdb_user/:_rev?/:revision?', function (req, res, next) {
    const {
      name,
      password
    } = req.body;
    const remoteName = req.remote_user.name;

    if (_lodash.default.isNil(remoteName) === false && _lodash.default.isNil(name) === false && remoteName === name) {
      auth.authenticate(name, password, async function callbackAuthenticate(err, user) {
        if (err) {
          _logger.logger.trace({
            name,
            err
          }, 'authenticating for user @{username} failed. Error: @{err.message}');

          return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.UNAUTHORIZED, _constants.API_ERROR.BAD_USERNAME_PASSWORD));
        }

        const restoredRemoteUser = (0, _authUtils.createRemoteUser)(name, user.groups || []);
        const token = await (0, _authUtils.getApiToken)(auth, config, restoredRemoteUser, password);
        res.status(_constants.HTTP_STATUS.CREATED);
        return next({
          ok: (0, _authUtils.getAuthenticatedMessage)(req.remote_user.name),
          token
        });
      });
    } else {
      if ((0, _authUtils.validatePassword)(password) === false) {
        // eslint-disable-next-line new-cap
        return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.BAD_REQUEST, _constants.API_ERROR.PASSWORD_SHORT()));
      }

      auth.add_user(name, password, async function (err, user) {
        if (err) {
          if (err.status >= _constants.HTTP_STATUS.BAD_REQUEST && err.status < _constants.HTTP_STATUS.INTERNAL_ERROR) {
            // With npm registering is the same as logging in,
            // and npm accepts only an 409 error.
            // So, changing status code here.
            return next(_utils.ErrorCode.getCode(err.status, err.message) || _utils.ErrorCode.getConflict(err.message));
          }

          return next(err);
        }

        const token = name && password ? await (0, _authUtils.getApiToken)(auth, config, user, password) : undefined;
        req.remote_user = user;
        res.status(_constants.HTTP_STATUS.CREATED);
        return next({
          ok: `user '${req.body.name}' created`,
          token
        });
      });
    }
  });
  route.delete('/-/user/token/*', function (req, res, next) {
    res.status(_constants.HTTP_STATUS.OK);
    next({
      ok: _constants.API_MESSAGE.LOGGED_OUT
    });
  }); // placeholder 'cause npm require to be authenticated to publish
  // we do not do any real authentication yet

  route.post('/_session', _cookies.default.express(), function (req, res, next) {
    res.cookies.set('AuthSession', String(Math.random()), (0, _authUtils.createSessionToken)());
    next({
      ok: true,
      name: 'somebody',
      roles: []
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvZW5kcG9pbnQvYXBpL3VzZXIudHMiXSwibmFtZXMiOlsicm91dGUiLCJhdXRoIiwiY29uZmlnIiwiZ2V0IiwicmVxIiwicmVzIiwibmV4dCIsInN0YXR1cyIsIkhUVFBfU1RBVFVTIiwiT0siLCJvayIsInJlbW90ZV91c2VyIiwibmFtZSIsInB1dCIsInBhc3N3b3JkIiwiYm9keSIsInJlbW90ZU5hbWUiLCJfIiwiaXNOaWwiLCJhdXRoZW50aWNhdGUiLCJjYWxsYmFja0F1dGhlbnRpY2F0ZSIsImVyciIsInVzZXIiLCJsb2dnZXIiLCJ0cmFjZSIsIkVycm9yQ29kZSIsImdldENvZGUiLCJVTkFVVEhPUklaRUQiLCJBUElfRVJST1IiLCJCQURfVVNFUk5BTUVfUEFTU1dPUkQiLCJyZXN0b3JlZFJlbW90ZVVzZXIiLCJncm91cHMiLCJ0b2tlbiIsIkNSRUFURUQiLCJCQURfUkVRVUVTVCIsIlBBU1NXT1JEX1NIT1JUIiwiYWRkX3VzZXIiLCJJTlRFUk5BTF9FUlJPUiIsIm1lc3NhZ2UiLCJnZXRDb25mbGljdCIsInVuZGVmaW5lZCIsImRlbGV0ZSIsIkFQSV9NRVNTQUdFIiwiTE9HR0VEX09VVCIsInBvc3QiLCJDb29raWVzIiwiZXhwcmVzcyIsImNvb2tpZXMiLCJzZXQiLCJTdHJpbmciLCJNYXRoIiwicmFuZG9tIiwicm9sZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFJQTs7QUFDQTs7QUFDQTs7QUFPQTs7OztBQUllLGtCQUFVQSxLQUFWLEVBQXlCQyxJQUF6QixFQUFzQ0MsTUFBdEMsRUFBNEQ7QUFDekVGLEVBQUFBLEtBQUssQ0FBQ0csR0FBTixDQUNFLDJCQURGLEVBRUUsVUFBVUMsR0FBVixFQUErQkMsR0FBL0IsRUFBOENDLElBQTlDLEVBQTRFO0FBQzFFRCxJQUFBQSxHQUFHLENBQUNFLE1BQUosQ0FBV0MsdUJBQVlDLEVBQXZCO0FBQ0FILElBQUFBLElBQUksQ0FBQztBQUNISSxNQUFB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QUFKLENBQVdDLHVCQUFZeUIsT0FBdkI7QUFDQSxlQUFPM0IsSUFBSSxDQUFDO0FBQ1ZJLFVBQUFBLEVBQUUsRUFBRyxTQUFRTixHQUFHLENBQUNXLElBQUosQ0FBU0gsSUFBSyxXQURqQjtBQUVWb0IsVUFBQUE7QUFGVSxTQUFELENBQVg7QUFJRCxPQXRCRDtBQXVCRDtBQUNGLEdBOURIO0FBaUVBaEMsRUFBQUEsS0FBSyxDQUFDeUMsTUFBTixDQUNFLGlCQURGLEVBRUUsVUFBVXJDLEdBQVYsRUFBK0JDLEdBQS9CLEVBQThDQyxJQUE5QyxFQUE0RTtBQUMxRUQsSUFBQUEsR0FBRyxDQUFDRSxNQUFKLENBQVdDLHVCQUFZQyxFQUF2QjtBQUNBSCxJQUFBQSxJQUFJLENBQUM7QUFDSEksTUFBQUEsRUFBRSxFQUFFZ0MsdUJBQVlDO0FBRGIsS0FBRCxDQUFKO0FBR0QsR0FQSCxFQTVFeUUsQ0FzRnpFO0FBQ0E7O0FBQ0EzQyxFQUFBQSxLQUFLLENBQUM0QyxJQUFOLENBQ0UsV0FERixFQUVFQyxpQkFBUUMsT0FBUixFQUZGLEVBR0UsVUFBVTFDLEdBQVYsRUFBK0JDLEdBQS9CLEVBQXFEQyxJQUFyRCxFQUFtRjtBQUNqRkQsSUFBQUEsR0FBRyxDQUFDMEMsT0FBSixDQUFZQyxHQUFaLENBQWdCLGFBQWhCLEVBQStCQyxNQUFNLENBQUNDLElBQUksQ0FBQ0MsTUFBTCxFQUFELENBQXJDLEVBQXNELG9DQUF0RDtBQUVBN0MsSUFBQUEsSUFBSSxDQUFDO0FBQ0hJLE1BQUFBLEVBQUUsRUFBRSxJQUREO0FBRUhFLE1BQUFBLElBQUksRUFBRSxVQUZIO0FBR0h3QyxNQUFBQSxLQUFLLEVBQUU7QUFISixLQUFELENBQUo7QUFLRCxHQVhIO0FBYUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IENvb2tpZXMgZnJvbSAnY29va2llcyc7XG5cbmltcG9ydCB7IENvbmZpZywgUmVtb3RlVXNlciB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuaW1wb3J0IHsgUmVzcG9uc2UsIFJvdXRlciB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgRXJyb3JDb2RlIH0gZnJvbSAnLi4vLi4vLi4vbGliL3V0aWxzJztcbmltcG9ydCB7IEFQSV9FUlJPUiwgQVBJX01FU1NBR0UsIEhUVFBfU1RBVFVTIH0gZnJvbSAnLi4vLi4vLi4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQge1xuICBjcmVhdGVSZW1vdGVVc2VyLFxuICBjcmVhdGVTZXNzaW9uVG9rZW4sXG4gIGdldEFwaVRva2VuLFxuICBnZXRBdXRoZW50aWNhdGVkTWVzc2FnZSxcbiAgdmFsaWRhdGVQYXNzd29yZFxufSBmcm9tICcuLi8uLi8uLi9saWIvYXV0aC11dGlscyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi8uLi8uLi9saWIvbG9nZ2VyJztcblxuaW1wb3J0IHsgJFJlcXVlc3RFeHRlbmQsICRSZXNwb25zZUV4dGVuZCwgJE5leHRGdW5jdGlvblZlciwgSUF1dGggfSBmcm9tICcuLi8uLi8uLi8uLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChyb3V0ZTogUm91dGVyLCBhdXRoOiBJQXV0aCwgY29uZmlnOiBDb25maWcpOiB2b2lkIHtcbiAgcm91dGUuZ2V0KFxuICAgICcvLS91c2VyLzpvcmdfY291Y2hkYl91c2VyJyxcbiAgICBmdW5jdGlvbiAocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiBSZXNwb25zZSwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgICAgcmVzLnN0YXR1cyhIVFRQX1NUQVRVUy5PSyk7XG4gICAgICBuZXh0KHtcbiAgICAgICAgb2s6IGdldEF1dGhlbnRpY2F0ZWRNZXNzYWdlKHJlcS5yZW1vdGVfdXNlci5uYW1lKVxuICAgICAgfSk7XG4gICAgfVxuICApO1xuXG4gIHJvdXRlLnB1dChcbiAgICAnLy0vdXNlci86b3JnX2NvdWNoZGJfdXNlci86X3Jldj8vOnJldmlzaW9uPycsXG4gICAgZnVuY3Rpb24gKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogUmVzcG9uc2UsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHsgbmFtZSwgcGFzc3dvcmQgfSA9IHJlcS5ib2R5O1xuICAgICAgY29uc3QgcmVtb3RlTmFtZSA9IHJlcS5yZW1vdGVfdXNlci5uYW1lO1xuXG4gICAgICBpZiAoXy5pc05pbChyZW1vdGVOYW1lKSA9PT0gZmFsc2UgJiYgXy5pc05pbChuYW1lKSA9PT0gZmFsc2UgJiYgcmVtb3RlTmFtZSA9PT0gbmFtZSkge1xuICAgICAgICBhdXRoLmF1dGhlbnRpY2F0ZShcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHBhc3N3b3JkLFxuICAgICAgICAgIGFzeW5jIGZ1bmN0aW9uIGNhbGxiYWNrQXV0aGVudGljYXRlKGVyciwgdXNlcik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICBsb2dnZXIudHJhY2UoXG4gICAgICAgICAgICAgICAgeyBuYW1lLCBlcnIgfSxcbiAgICAgICAgICAgICAgICAnYXV0aGVudGljYXRpbmcgZm9yIHVzZXIgQHt1c2VybmFtZX0gZmFpbGVkLiBFcnJvcjogQHtlcnIubWVzc2FnZX0nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0KFxuICAgICAgICAgICAgICAgIEVycm9yQ29kZS5nZXRDb2RlKEhUVFBfU1RBVFVTLlVOQVVUSE9SSVpFRCwgQVBJX0VSUk9SLkJBRF9VU0VSTkFNRV9QQVNTV09SRClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVzdG9yZWRSZW1vdGVVc2VyOiBSZW1vdGVVc2VyID0gY3JlYXRlUmVtb3RlVXNlcihuYW1lLCB1c2VyLmdyb3VwcyB8fCBbXSk7XG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGdldEFwaVRva2VuKGF1dGgsIGNvbmZpZywgcmVzdG9yZWRSZW1vdGVVc2VyLCBwYXNzd29yZCk7XG5cbiAgICAgICAgICAgIHJlcy5zdGF0dXMoSFRUUF9TVEFUVVMuQ1JFQVRFRCk7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXh0KHtcbiAgICAgICAgICAgICAgb2s6IGdldEF1dGhlbnRpY2F0ZWRNZXNzYWdlKHJlcS5yZW1vdGVfdXNlci5uYW1lKSxcbiAgICAgICAgICAgICAgdG9rZW5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh2YWxpZGF0ZVBhc3N3b3JkKHBhc3N3b3JkKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICAgICAgICAgIHJldHVybiBuZXh0KEVycm9yQ29kZS5nZXRDb2RlKEhUVFBfU1RBVFVTLkJBRF9SRVFVRVNULCBBUElfRVJST1IuUEFTU1dPUkRfU0hPUlQoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXV0aC5hZGRfdXNlcihuYW1lLCBwYXNzd29yZCwgYXN5bmMgZnVuY3Rpb24gKGVyciwgdXNlcik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIuc3RhdHVzID49IEhUVFBfU1RBVFVTLkJBRF9SRVFVRVNUICYmIGVyci5zdGF0dXMgPCBIVFRQX1NUQVRVUy5JTlRFUk5BTF9FUlJPUikge1xuICAgICAgICAgICAgICAvLyBXaXRoIG5wbSByZWdpc3RlcmluZyBpcyB0aGUgc2FtZSBhcyBsb2dnaW5nIGluLFxuICAgICAgICAgICAgICAvLyBhbmQgbnBtIGFjY2VwdHMgb25seSBhbiA0MDkgZXJyb3IuXG4gICAgICAgICAgICAgIC8vIFNvLCBjaGFuZ2luZyBzdGF0dXMgY29kZSBoZXJlLlxuICAgICAgICAgICAgICByZXR1cm4gbmV4dChcbiAgICAgICAgICAgICAgICBFcnJvckNvZGUuZ2V0Q29kZShlcnIuc3RhdHVzLCBlcnIubWVzc2FnZSkgfHwgRXJyb3JDb2RlLmdldENvbmZsaWN0KGVyci5tZXNzYWdlKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCB0b2tlbiA9XG4gICAgICAgICAgICBuYW1lICYmIHBhc3N3b3JkID8gYXdhaXQgZ2V0QXBpVG9rZW4oYXV0aCwgY29uZmlnLCB1c2VyLCBwYXNzd29yZCkgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICByZXEucmVtb3RlX3VzZXIgPSB1c2VyO1xuICAgICAgICAgIHJlcy5zdGF0dXMoSFRUUF9TVEFUVVMuQ1JFQVRFRCk7XG4gICAgICAgICAgcmV0dXJuIG5leHQoe1xuICAgICAgICAgICAgb2s6IGB1c2VyICcke3JlcS5ib2R5Lm5hbWV9JyBjcmVhdGVkYCxcbiAgICAgICAgICAgIHRva2VuXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxuICByb3V0ZS5kZWxldGUoXG4gICAgJy8tL3VzZXIvdG9rZW4vKicsXG4gICAgZnVuY3Rpb24gKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogUmVzcG9uc2UsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpOiB2b2lkIHtcbiAgICAgIHJlcy5zdGF0dXMoSFRUUF9TVEFUVVMuT0spO1xuICAgICAgbmV4dCh7XG4gICAgICAgIG9rOiBBUElfTUVTU0FHRS5MT0dHRURfT1VUXG4gICAgICB9KTtcbiAgICB9XG4gICk7XG5cbiAgLy8gcGxhY2Vob2xkZXIgJ2NhdXNlIG5wbSByZXF1aXJlIHRvIGJlIGF1dGhlbnRpY2F0ZWQgdG8gcHVibGlzaFxuICAvLyB3ZSBkbyBub3QgZG8gYW55IHJlYWwgYXV0aGVudGljYXRpb24geWV0XG4gIHJvdXRlLnBvc3QoXG4gICAgJy9fc2Vzc2lvbicsXG4gICAgQ29va2llcy5leHByZXNzKCksXG4gICAgZnVuY3Rpb24gKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogJFJlc3BvbnNlRXh0ZW5kLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gICAgICByZXMuY29va2llcy5zZXQoJ0F1dGhTZXNzaW9uJywgU3RyaW5nKE1hdGgucmFuZG9tKCkpLCBjcmVhdGVTZXNzaW9uVG9rZW4oKSk7XG5cbiAgICAgIG5leHQoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgbmFtZTogJ3NvbWVib2R5JyxcbiAgICAgICAgcm9sZXM6IFtdXG4gICAgICB9KTtcbiAgICB9XG4gICk7XG59XG4iXX0=