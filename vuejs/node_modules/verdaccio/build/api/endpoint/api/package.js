"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _lodash = _interopRequireDefault(require("lodash"));

var _middleware = require("../../middleware");

var _utils = require("../../../lib/utils");

var _constants = require("../../../lib/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const downloadStream = (packageName, filename, storage, req, res) => {
  const stream = storage.getTarball(packageName, filename);
  stream.on('content-length', function (content) {
    res.header('Content-Length', content);
  });
  stream.on('error', function (err) {
    return res.report_error(err);
  });
  res.header(_constants.HEADERS.CONTENT_TYPE, _constants.HEADERS.OCTET_STREAM);
  stream.pipe(res);
};

function _default(route, auth, storage, config) {
  const can = (0, _middleware.allow)(auth); // TODO: anonymous user?

  route.get('/:package/:version?', can('access'), function (req, res, next) {
    const getPackageMetaCallback = function (err, metadata) {
      if (err) {
        return next(err);
      }

      metadata = (0, _utils.convertDistRemoteToLocalTarballUrls)(metadata, req, config.url_prefix);
      let queryVersion = req.params.version;

      if (_lodash.default.isNil(queryVersion)) {
        return next(metadata);
      }

      let version = (0, _utils.getVersion)(metadata, queryVersion);

      if (_lodash.default.isNil(version) === false) {
        return next(version);
      }

      if (_lodash.default.isNil(metadata[_constants.DIST_TAGS]) === false) {
        if (_lodash.default.isNil(metadata[_constants.DIST_TAGS][queryVersion]) === false) {
          queryVersion = metadata[_constants.DIST_TAGS][queryVersion];
          version = (0, _utils.getVersion)(metadata, queryVersion);

          if (_lodash.default.isNil(version) === false) {
            return next(version);
          }
        }
      }

      return next(_utils.ErrorCode.getNotFound(`${_constants.API_ERROR.VERSION_NOT_EXIST}: ${req.params.version}`));
    };

    storage.getPackage({
      name: req.params.package,
      uplinksLook: true,
      req,
      callback: getPackageMetaCallback
    });
  });
  route.get('/:scopedPackage/-/:scope/:filename', can('access'), function (req, res) {
    const {
      scopedPackage,
      filename
    } = req.params;
    downloadStream(scopedPackage, filename, storage, req, res);
  });
  route.get('/:package/-/:filename', can('access'), function (req, res) {
    downloadStream(req.params.package, req.params.filename, storage, req, res);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvZW5kcG9pbnQvYXBpL3BhY2thZ2UudHMiXSwibmFtZXMiOlsiZG93bmxvYWRTdHJlYW0iLCJwYWNrYWdlTmFtZSIsImZpbGVuYW1lIiwic3RvcmFnZSIsInJlcSIsInJlcyIsInN0cmVhbSIsImdldFRhcmJhbGwiLCJvbiIsImNvbnRlbnQiLCJoZWFkZXIiLCJlcnIiLCJyZXBvcnRfZXJyb3IiLCJIRUFERVJTIiwiQ09OVEVOVF9UWVBFIiwiT0NURVRfU1RSRUFNIiwicGlwZSIsInJvdXRlIiwiYXV0aCIsImNvbmZpZyIsImNhbiIsImdldCIsIm5leHQiLCJnZXRQYWNrYWdlTWV0YUNhbGxiYWNrIiwibWV0YWRhdGEiLCJ1cmxfcHJlZml4IiwicXVlcnlWZXJzaW9uIiwicGFyYW1zIiwidmVyc2lvbiIsIl8iLCJpc05pbCIsIkRJU1RfVEFHUyIsIkVycm9yQ29kZSIsImdldE5vdEZvdW5kIiwiQVBJX0VSUk9SIiwiVkVSU0lPTl9OT1RfRVhJU1QiLCJnZXRQYWNrYWdlIiwibmFtZSIsInBhY2thZ2UiLCJ1cGxpbmtzTG9vayIsImNhbGxiYWNrIiwic2NvcGVkUGFja2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUdBOztBQUNBOztBQUNBOzs7O0FBU0EsTUFBTUEsY0FBYyxHQUFHLENBQ3JCQyxXQURxQixFQUVyQkMsUUFGcUIsRUFHckJDLE9BSHFCLEVBSXJCQyxHQUpxQixFQUtyQkMsR0FMcUIsS0FNWjtBQUNULFFBQU1DLE1BQU0sR0FBR0gsT0FBTyxDQUFDSSxVQUFSLENBQW1CTixXQUFuQixFQUFnQ0MsUUFBaEMsQ0FBZjtBQUVBSSxFQUFBQSxNQUFNLENBQUNFLEVBQVAsQ0FBVSxnQkFBVixFQUE0QixVQUFVQyxPQUFWLEVBQXlCO0FBQ25ESixJQUFBQSxHQUFHLENBQUNLLE1BQUosQ0FBVyxnQkFBWCxFQUE2QkQsT0FBN0I7QUFDRCxHQUZEO0FBSUFILEVBQUFBLE1BQU0sQ0FBQ0UsRUFBUCxDQUFV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LEVBQTBCQyxPQUExQixFQUFtQ0MsR0FBbkMsRUFBd0NDLEdBQXhDLENBQWQ7QUFDRCxHQVBIO0FBVUFZLEVBQUFBLEtBQUssQ0FBQ0ksR0FBTixDQUNFLHVCQURGLEVBRUVELEdBQUcsQ0FBQyxRQUFELENBRkwsRUFHRSxVQUFVaEIsR0FBVixFQUErQkMsR0FBL0IsRUFBMkQ7QUFDekRMLElBQUFBLGNBQWMsQ0FBQ0ksR0FBRyxDQUFDdUIsTUFBSixDQUFXVyxPQUFaLEVBQXFCbEMsR0FBRyxDQUFDdUIsTUFBSixDQUFXekIsUUFBaEMsRUFBMENDLE9BQTFDLEVBQW1EQyxHQUFuRCxFQUF3REMsR0FBeEQsQ0FBZDtBQUNELEdBTEg7QUFPRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IENvbmZpZywgUGFja2FnZSB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuaW1wb3J0IHsgYWxsb3cgfSBmcm9tICcuLi8uLi9taWRkbGV3YXJlJztcbmltcG9ydCB7IGNvbnZlcnREaXN0UmVtb3RlVG9Mb2NhbFRhcmJhbGxVcmxzLCBnZXRWZXJzaW9uLCBFcnJvckNvZGUgfSBmcm9tICcuLi8uLi8uLi9saWIvdXRpbHMnO1xuaW1wb3J0IHsgSEVBREVSUywgRElTVF9UQUdTLCBBUElfRVJST1IgfSBmcm9tICcuLi8uLi8uLi9saWIvY29uc3RhbnRzJztcbmltcG9ydCB7XG4gIElBdXRoLFxuICAkUmVzcG9uc2VFeHRlbmQsXG4gICRSZXF1ZXN0RXh0ZW5kLFxuICAkTmV4dEZ1bmN0aW9uVmVyLFxuICBJU3RvcmFnZUhhbmRsZXJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vdHlwZXMnO1xuXG5jb25zdCBkb3dubG9hZFN0cmVhbSA9IChcbiAgcGFja2FnZU5hbWU6IHN0cmluZyxcbiAgZmlsZW5hbWU6IHN0cmluZyxcbiAgc3RvcmFnZTogYW55LFxuICByZXE6ICRSZXF1ZXN0RXh0ZW5kLFxuICByZXM6ICRSZXNwb25zZUV4dGVuZFxuKTogdm9pZCA9PiB7XG4gIGNvbnN0IHN0cmVhbSA9IHN0b3JhZ2UuZ2V0VGFyYmFsbChwYWNrYWdlTmFtZSwgZmlsZW5hbWUpO1xuXG4gIHN0cmVhbS5vbignY29udGVudC1sZW5ndGgnLCBmdW5jdGlvbiAoY29udGVudCk6IHZvaWQge1xuICAgIHJlcy5oZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoJywgY29udGVudCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKTogdm9pZCB7XG4gICAgcmV0dXJuIHJlcy5yZXBvcnRfZXJyb3IoZXJyKTtcbiAgfSk7XG5cbiAgcmVzLmhlYWRlcihIRUFERVJTLkNPTlRFTlRfVFlQRSwgSEVBREVSUy5PQ1RFVF9TVFJFQU0pO1xuICBzdHJlYW0ucGlwZShyZXMpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKFxuICByb3V0ZTogUm91dGVyLFxuICBhdXRoOiBJQXV0aCxcbiAgc3RvcmFnZTogSVN0b3JhZ2VIYW5kbGVyLFxuICBjb25maWc6IENvbmZpZ1xuKTogdm9pZCB7XG4gIGNvbnN0IGNhbiA9IGFsbG93KGF1dGgpO1xuICAvLyBUT0RPOiBhbm9ueW1vdXMgdXNlcj9cbiAgcm91dGUuZ2V0KFxuICAgICcvOnBhY2thZ2UvOnZlcnNpb24/JyxcbiAgICBjYW4oJ2FjY2VzcycpLFxuICAgIGZ1bmN0aW9uIChyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgICAgY29uc3QgZ2V0UGFja2FnZU1ldGFDYWxsYmFjayA9IGZ1bmN0aW9uIChlcnIsIG1ldGFkYXRhOiBQYWNrYWdlKTogdm9pZCB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gbmV4dChlcnIpO1xuICAgICAgICB9XG4gICAgICAgIG1ldGFkYXRhID0gY29udmVydERpc3RSZW1vdGVUb0xvY2FsVGFyYmFsbFVybHMobWV0YWRhdGEsIHJlcSwgY29uZmlnLnVybF9wcmVmaXgpO1xuXG4gICAgICAgIGxldCBxdWVyeVZlcnNpb24gPSByZXEucGFyYW1zLnZlcnNpb247XG4gICAgICAgIGlmIChfLmlzTmlsKHF1ZXJ5VmVyc2lvbikpIHtcbiAgICAgICAgICByZXR1cm4gbmV4dChtZXRhZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdmVyc2lvbiA9IGdldFZlcnNpb24obWV0YWRhdGEsIHF1ZXJ5VmVyc2lvbik7XG4gICAgICAgIGlmIChfLmlzTmlsKHZlcnNpb24pID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBuZXh0KHZlcnNpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uaXNOaWwobWV0YWRhdGFbRElTVF9UQUdTXSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKF8uaXNOaWwobWV0YWRhdGFbRElTVF9UQUdTXVtxdWVyeVZlcnNpb25dKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHF1ZXJ5VmVyc2lvbiA9IG1ldGFkYXRhW0RJU1RfVEFHU11bcXVlcnlWZXJzaW9uXTtcbiAgICAgICAgICAgIHZlcnNpb24gPSBnZXRWZXJzaW9uKG1ldGFkYXRhLCBxdWVyeVZlcnNpb24pO1xuICAgICAgICAgICAgaWYgKF8uaXNOaWwodmVyc2lvbikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0KHZlcnNpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV4dChFcnJvckNvZGUuZ2V0Tm90Rm91bmQoYCR7QVBJX0VSUk9SLlZFUlNJT05fTk9UX0VYSVNUfTogJHtyZXEucGFyYW1zLnZlcnNpb259YCkpO1xuICAgICAgfTtcblxuICAgICAgc3RvcmFnZS5nZXRQYWNrYWdlKHtcbiAgICAgICAgbmFtZTogcmVxLnBhcmFtcy5wYWNrYWdlLFxuICAgICAgICB1cGxpbmtzTG9vazogdHJ1ZSxcbiAgICAgICAgcmVxLFxuICAgICAgICBjYWxsYmFjazogZ2V0UGFja2FnZU1ldGFDYWxsYmFja1xuICAgICAgfSk7XG4gICAgfVxuICApO1xuXG4gIHJvdXRlLmdldChcbiAgICAnLzpzY29wZWRQYWNrYWdlLy0vOnNjb3BlLzpmaWxlbmFtZScsXG4gICAgY2FuKCdhY2Nlc3MnKSxcbiAgICBmdW5jdGlvbiAocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiAkUmVzcG9uc2VFeHRlbmQpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHsgc2NvcGVkUGFja2FnZSwgZmlsZW5hbWUgfSA9IHJlcS5wYXJhbXM7XG5cbiAgICAgIGRvd25sb2FkU3RyZWFtKHNjb3BlZFBhY2thZ2UsIGZpbGVuYW1lLCBzdG9yYWdlLCByZXEsIHJlcyk7XG4gICAgfVxuICApO1xuXG4gIHJvdXRlLmdldChcbiAgICAnLzpwYWNrYWdlLy0vOmZpbGVuYW1lJyxcbiAgICBjYW4oJ2FjY2VzcycpLFxuICAgIGZ1bmN0aW9uIChyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCk6IHZvaWQge1xuICAgICAgZG93bmxvYWRTdHJlYW0ocmVxLnBhcmFtcy5wYWNrYWdlLCByZXEucGFyYW1zLmZpbGVuYW1lLCBzdG9yYWdlLCByZXEsIHJlcyk7XG4gICAgfVxuICApO1xufVxuIl19