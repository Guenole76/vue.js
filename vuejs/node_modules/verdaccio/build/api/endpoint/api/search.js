"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constants = require("../../../lib/constants");

/**
 * @prettier
 */
function _default(route, auth, storage) {
  // searching packages
  route.get('/-/all(/since)?', function (req, res) {
    let received_end = false;
    let response_finished = false;
    let processing_pkgs = 0;
    let firstPackage = true;
    res.status(200);
    res.set(_constants.HEADERS.CONTENT_TYPE, _constants.HEADERS.JSON_CHARSET);
    /*
     * Offical NPM registry (registry.npmjs.org) no longer return whole database,
     * They only return packages matched with keyword in `referer: search pkg-name`,
     * And NPM client will request server in every search.
     *
     * The magic number 99999 was sent by NPM registry. Modify it may caused strange
     * behaviour in the future.
     *
     * BTW: NPM will not return result if user-agent does not contain string 'npm',
     * See: method 'request' in up-storage.js
     *
     * If there is no cache in local, NPM will request /-/all, then get response with
     * _updated: 99999, 'Date' in response header was Mon, 10 Oct 1983 00:12:48 GMT,
     * this will make NPM always query from server
     *
     * Data structure also different, whel request /-/all, response is an object, but
     * when request /-/all/since, response is an array
     */

    const respShouldBeArray = req.path.endsWith('/since');

    if (!respShouldBeArray) {
      res.set('Date', 'Mon, 10 Oct 1983 00:12:48 GMT');
    }

    const check_finish = function () {
      if (!received_end) {
        return;
      }

      if (processing_pkgs) {
        return;
      }

      if (response_finished) {
        return;
      }

      response_finished = true;

      if (respShouldBeArray) {
        res.end(']\n');
      } else {
        res.end('}\n');
      }
    };

    if (respShouldBeArray) {
      res.write('[');
    } else {
      res.write('{"_updated":' + 99999);
    }

    const stream = storage.search(req.query.startkey || 0, {
      req: req
    });
    stream.on('data', function each(pkg) {
      processing_pkgs++;
      auth.allow_access({
        packageName: pkg.name
      }, req.remote_user, function (err, allowed) {
        processing_pkgs--;

        if (err) {
          if (err.status && String(err.status).match(/^4\d\d$/)) {
            // auth plugin returns 4xx user error,
            // that's equivalent of !allowed basically
            allowed = false;
          } else {
            stream.abort(err);
          }
        }

        if (allowed) {
          if (respShouldBeArray) {
            res.write(`${firstPackage ? '' : ','}${JSON.stringify(pkg)}\n`);

            if (firstPackage) {
              firstPackage = false;
            }
          } else {
            res.write(',\n' + JSON.stringify(pkg.name) + ':' + JSON.stringify(pkg));
          }
        }

        check_finish();
      });
    });
    stream.on('error', function () {
      res.socket.destroy();
    });
    stream.on('end', function () {
      received_end = true;
      check_finish();
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvZW5kcG9pbnQvYXBpL3NlYXJjaC50cyJdLCJuYW1lcyI6WyJyb3V0ZSIsImF1dGgiLCJzdG9yYWdlIiwiZ2V0IiwicmVxIiwicmVzIiwicmVjZWl2ZWRfZW5kIiwicmVzcG9uc2VfZmluaXNoZWQiLCJwcm9jZXNzaW5nX3BrZ3MiLCJmaXJzdFBhY2thZ2UiLCJzdGF0dXMiLCJzZXQiLCJIRUFERVJTIiwiQ09OVEVOVF9UWVBFIiwiSlNPTl9DSEFSU0VUIiwicmVzcFNob3VsZEJlQXJyYXkiLCJwYXRoIiwiZW5kc1dpdGgiLCJjaGVja19maW5pc2giLCJlbmQiLCJ3cml0ZSIsInN0cmVhbSIsInNlYXJjaCIsInF1ZXJ5Iiwic3RhcnRrZXkiLCJvbiIsImVhY2giLCJwa2ciLCJhbGxvd19hY2Nlc3MiLCJwYWNrYWdlTmFtZSIsIm5hbWUiLCJyZW1vdGVfdXNlciIsImVyciIsImFsbG93ZWQiLCJTdHJpbmciLCJtYXRjaCIsImFib3J0IiwiSlNPTiIsInN0cmluZ2lmeSIsInNvY2tldCIsImRlc3Ryb3kiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFFZSxrQkFBVUEsS0FBVixFQUFpQkMsSUFBakIsRUFBdUJDLE9BQXZCLEVBQXNDO0FBQ25EO0FBQ0FGLEVBQUFBLEtBQUssQ0FBQ0csR0FBTixDQUFVLGlCQUFWLEVBQTZCLFVBQVVDLEdBQVYsRUFBZUMsR0FBZixFQUFvQjtBQUMvQyxRQUFJQyxZQUFZLEdBQUcsS0FBbkI7QUFDQSxRQUFJQyxpQkFBaUIsR0FBRyxLQUF4QjtBQUNBLFFBQUlDLGVBQWUsR0FBRyxDQUF0QjtBQUNBLFFBQUlDLFlBQVksR0FBRyxJQUFuQjtBQUVBSixJQUFBQSxHQUFHLENBQUNLLE1BQUosQ0FBVyxHQUFYO0FBQ0FMLElBQUFBLEdBQUcsQ0FBQ00sR0FBSixDQUFRQyxtQkFBUUMsWUFBaEIsRUFBOEJELG1CQUFRRSxZQUF0QztBQUVBO0FBQ0o7QUFDQTtBQUNB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QUFBQSxNQUFNLENBQUNJLEVBQVAsQ0FBVSxLQUFWLEVBQWlCLFlBQVk7QUFDM0JuQixNQUFBQSxZQUFZLEdBQUcsSUFBZjtBQUNBWSxNQUFBQSxZQUFZO0FBQ2IsS0FIRDtBQUlELEdBaEdEO0FBaUdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSEVBREVSUyB9IGZyb20gJy4uLy4uLy4uL2xpYi9jb25zdGFudHMnO1xuXG4vKipcbiAqIEBwcmV0dGllclxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChyb3V0ZSwgYXV0aCwgc3RvcmFnZSk6IHZvaWQge1xuICAvLyBzZWFyY2hpbmcgcGFja2FnZXNcbiAgcm91dGUuZ2V0KCcvLS9hbGwoL3NpbmNlKT8nLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICBsZXQgcmVjZWl2ZWRfZW5kID0gZmFsc2U7XG4gICAgbGV0IHJlc3BvbnNlX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgbGV0IHByb2Nlc3NpbmdfcGtncyA9IDA7XG4gICAgbGV0IGZpcnN0UGFja2FnZSA9IHRydWU7XG5cbiAgICByZXMuc3RhdHVzKDIwMCk7XG4gICAgcmVzLnNldChIRUFERVJTLkNPTlRFTlRfVFlQRSwgSEVBREVSUy5KU09OX0NIQVJTRVQpO1xuXG4gICAgLypcbiAgICAgKiBPZmZpY2FsIE5QTSByZWdpc3RyeSAocmVnaXN0cnkubnBtanMub3JnKSBubyBsb25nZXIgcmV0dXJuIHdob2xlIGRhdGFiYXNlLFxuICAgICAqIFRoZXkgb25seSByZXR1cm4gcGFja2FnZXMgbWF0Y2hlZCB3aXRoIGtleXdvcmQgaW4gYHJlZmVyZXI6IHNlYXJjaCBwa2ctbmFtZWAsXG4gICAgICogQW5kIE5QTSBjbGllbnQgd2lsbCByZXF1ZXN0IHNlcnZlciBpbiBldmVyeSBzZWFyY2guXG4gICAgICpcbiAgICAgKiBUaGUgbWFnaWMgbnVtYmVyIDk5OTk5IHdhcyBzZW50IGJ5IE5QTSByZWdpc3RyeS4gTW9kaWZ5IGl0IG1heSBjYXVzZWQgc3RyYW5nZVxuICAgICAqIGJlaGF2aW91ciBpbiB0aGUgZnV0dXJlLlxuICAgICAqXG4gICAgICogQlRXOiBOUE0gd2lsbCBub3QgcmV0dXJuIHJlc3VsdCBpZiB1c2VyLWFnZW50IGRvZXMgbm90IGNvbnRhaW4gc3RyaW5nICducG0nLFxuICAgICAqIFNlZTogbWV0aG9kICdyZXF1ZXN0JyBpbiB1cC1zdG9yYWdlLmpzXG4gICAgICpcbiAgICAgKiBJZiB0aGVyZSBpcyBubyBjYWNoZSBpbiBsb2NhbCwgTlBNIHdpbGwgcmVxdWVzdCAvLS9hbGwsIHRoZW4gZ2V0IHJlc3BvbnNlIHdpdGhcbiAgICAgKiBfdXBkYXRlZDogOTk5OTksICdEYXRlJyBpbiByZXNwb25zZSBoZWFkZXIgd2FzIE1vbiwgMTAgT2N0IDE5ODMgMDA6MTI6NDggR01ULFxuICAgICAqIHRoaXMgd2lsbCBtYWtlIE5QTSBhbHdheXMgcXVlcnkgZnJvbSBzZXJ2ZXJcbiAgICAgKlxuICAgICAqIERhdGEgc3RydWN0dXJlIGFsc28gZGlmZmVyZW50LCB3aGVsIHJlcXVlc3QgLy0vYWxsLCByZXNwb25zZSBpcyBhbiBvYmplY3QsIGJ1dFxuICAgICAqIHdoZW4gcmVxdWVzdCAvLS9hbGwvc2luY2UsIHJlc3BvbnNlIGlzIGFuIGFycmF5XG4gICAgICovXG4gICAgY29uc3QgcmVzcFNob3VsZEJlQXJyYXkgPSByZXEucGF0aC5lbmRzV2l0aCgnL3NpbmNlJyk7XG4gICAgaWYgKCFyZXNwU2hvdWxkQmVBcnJheSkge1xuICAgICAgcmVzLnNldCgnRGF0ZScsICdNb24sIDEwIE9jdCAxOTgzIDAwOjEyOjQ4IEdNVCcpO1xuICAgIH1cbiAgICBjb25zdCBjaGVja19maW5pc2ggPSBmdW5jdGlvbiAoKTogdm9pZCB7XG4gICAgICBpZiAoIXJlY2VpdmVkX2VuZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzc2luZ19wa2dzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChyZXNwb25zZV9maW5pc2hlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXNwb25zZV9maW5pc2hlZCA9IHRydWU7XG4gICAgICBpZiAocmVzcFNob3VsZEJlQXJyYXkpIHtcbiAgICAgICAgcmVzLmVuZCgnXVxcbicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzLmVuZCgnfVxcbicpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAocmVzcFNob3VsZEJlQXJyYXkpIHtcbiAgICAgIHJlcy53cml0ZSgnWycpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMud3JpdGUoJ3tcIl91cGRhdGVkXCI6JyArIDk5OTk5KTtcbiAgICB9XG5cbiAgICBjb25zdCBzdHJlYW0gPSBzdG9yYWdlLnNlYXJjaChyZXEucXVlcnkuc3RhcnRrZXkgfHwgMCwgeyByZXE6IHJlcSB9KTtcblxuICAgIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIGVhY2gocGtnKSB7XG4gICAgICBwcm9jZXNzaW5nX3BrZ3MrKztcblxuICAgICAgYXV0aC5hbGxvd19hY2Nlc3MoeyBwYWNrYWdlTmFtZTogcGtnLm5hbWUgfSwgcmVxLnJlbW90ZV91c2VyLCBmdW5jdGlvbiAoZXJyLCBhbGxvd2VkKSB7XG4gICAgICAgIHByb2Nlc3NpbmdfcGtncy0tO1xuXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBpZiAoZXJyLnN0YXR1cyAmJiBTdHJpbmcoZXJyLnN0YXR1cykubWF0Y2goL140XFxkXFxkJC8pKSB7XG4gICAgICAgICAgICAvLyBhdXRoIHBsdWdpbiByZXR1cm5zIDR4eCB1c2VyIGVycm9yLFxuICAgICAgICAgICAgLy8gdGhhdCdzIGVxdWl2YWxlbnQgb2YgIWFsbG93ZWQgYmFzaWNhbGx5XG4gICAgICAgICAgICBhbGxvd2VkID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmVhbS5hYm9ydChlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbGxvd2VkKSB7XG4gICAgICAgICAgaWYgKHJlc3BTaG91bGRCZUFycmF5KSB7XG4gICAgICAgICAgICByZXMud3JpdGUoYCR7Zmlyc3RQYWNrYWdlID8gJycgOiAnLCd9JHtKU09OLnN0cmluZ2lmeShwa2cpfVxcbmApO1xuICAgICAgICAgICAgaWYgKGZpcnN0UGFja2FnZSkge1xuICAgICAgICAgICAgICBmaXJzdFBhY2thZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzLndyaXRlKCcsXFxuJyArIEpTT04uc3RyaW5naWZ5KHBrZy5uYW1lKSArICc6JyArIEpTT04uc3RyaW5naWZ5KHBrZykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNoZWNrX2ZpbmlzaCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzdHJlYW0ub24oJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgcmVzLnNvY2tldC5kZXN0cm95KCk7XG4gICAgfSk7XG5cbiAgICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlY2VpdmVkX2VuZCA9IHRydWU7XG4gICAgICBjaGVja19maW5pc2goKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=